category x = "Id"
category n = "Int"
category l = "Loc"
category o = "Operator"
category e = Syntax ∪ n ∪ x

category env  =  x -> l
category sto  =  l -> n
category s  =  (env × sto × l)

meta add = (i × i) -> i
meta inc = l -> l
meta gt = (i × i) -> Bool
meta lteq = (i × i) -> Bool

system (s × e) => (s × e)

rule Paren
------------------------
<s, "(" e ")"> => <s, e>

rule Oper1
    <s, e1> => <s', e1'>
------------------------------
<s, e1 o e2> => <s', e1' o e2>

rule Oper2
    <s, e1> => <s', v>
----------------------------
<s, e1 o e2> => <s', v o e2>

rule Oper3
    <s, e> => <s', e'>
--------------------------
<s, v o e> => <s', v o e'>

rule Oper4
    <s, e> => <s', v2>
----------------------------
<s, v1 o e> => <s', v1 o v2>

rule OperAdd
    n = add(n1, n2)
------------------------
<s, n1 "+" n2> => <s, n>

rule OperEqTrue
        n1 == n2
--------------------------
<s, n1 "=" n2> => <s, "1">

rule OperEqFalse
        n1 != n2
--------------------------
<s, n1 "=" n2> => <s, "0">

rule OperNEqTrue
        n1 != n2
---------------------------
<s, n1 "!=" n2> => <s, "1">

rule OperNEqFalse
        n1 == n2
---------------------------
<s, n1 "!=" n2> => <s, "0">

rule VarDec
next' = inc(next)   env' = env[x |-> next]    sto' = sto[next |-> "0"]
----------------------------------------------------------------------
        <(env sto next), "var" x> => <(env' sto' next'), "0">

rule VarAss1
      <s, e> => <s', e'>
--------------------------------
<s, x "<-" e> => <s', x "<-" e'>

rule VarAss2
      <s, e> => <s', v>
-------------------------------
<s, x "<-" e> => <s', x "<-" v>

rule VarAss3
     sto' = sto[l |-> v]      l = env(x)
--------------------------------------------------
<(env sto next), x "<-" v> => <(env sto' next), v>

rule VarUse
       l = env(x)     v = sto(l)
------------------------------------------
<(env sto next), x> => <(env sto next), v>

rule Skip
---------------------
<s, "skip"> => <s, "0">

rule Seq1
      <s, e1> => <s', e1'>
----------------------------------
<s, e1 ";" e2> => <s', e1' ";" e2>

rule Seq2
   <s, e1> => <s', _>
-------------------------
<s, e1 ";" e2> => <s', e2>


rule If1
                         <s, e1> => <s', e1'>
---------------------------------------------------------------------
<s, "if" e1 "then" e2 "else" e3> => <s', "if" e1' "then" e2 "else" e3>

rule If2
                         <s, e1> => <s', v>
---------------------------------------------------------------------
<s, "if" e1 "then" e2 "else" e3> => <s', "if" v "then" e2 "else" e3>

rule IfTrue
            gt(n, 0) == "true"
-------------------------------------------
<s, "if" n "then" e2 "else" _e3> => <s, e2>

rule IfFalse
            lteq(n, 0) == "true"
-------------------------------------------
<s, "if" n "then" _e2 "else" e3> => <s, e3>

rule While
-----------------------------------------------------------------------------------------------
<s, "while" e1 "do" e2> => <s, "if" e1 "then" "(" e2 ";" "while" e1 "do" e2 ")" "else" "skip">

